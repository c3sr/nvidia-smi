// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package  nvidiasmi

import (
  easyjson "github.com/mailru/easyjson"
  jlexer "github.com/mailru/easyjson/jlexer"
  json "encoding/json"
  jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
   _ *json.RawMessage
   _ *jlexer.Lexer
   _ *jwriter.Writer
   _ easyjson.Marshaler
)

func easyjsonE60a21b8DecodeGithubComRaiProjectNvidiaSmi(in *jlexer.Lexer, out *NvidiaSmi) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "timestamp":
      out.Timestamp = string(in.String())
    case "driver_version":
      out.DriverVersion = string(in.String())
    case "attached_gpus":
      out.AttachedGpus = string(in.String())
    case "gpus":
      if in.IsNull() {
        in.Skip()
        out.GPUS = nil
      } else {
        in.Delim('[')
        if out.GPUS == nil {
          if !in.IsDelim(']') {
            out.GPUS = make([]GPU, 0, 1)
          } else {
            out.GPUS = []GPU{}
          }
        } else { 
          out.GPUS = (out.GPUS)[:0]
        }
        for !in.IsDelim(']') {
          var v1 GPU
          (v1).UnmarshalEasyJSON(in)
          out.GPUS = append(out.GPUS, v1)
          in.WantComma()
        }
        in.Delim(']')
      }
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonE60a21b8EncodeGithubComRaiProjectNvidiaSmi(out *jwriter.Writer, in NvidiaSmi) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"timestamp\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Timestamp))
  }
  {
    const prefix string = ",\"driver_version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.DriverVersion))
  }
  {
    const prefix string = ",\"attached_gpus\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.AttachedGpus))
  }
  {
    const prefix string = ",\"gpus\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    if in.GPUS == nil && (out.Flags & jwriter.NilSliceAsEmpty) == 0 {
      out.RawString("null")
    } else {
      out.RawByte('[')
      for v2, v3 := range in.GPUS {
        if v2 > 0 {
          out.RawByte(',')
        }
        (v3).MarshalEasyJSON(out)
      }
      out.RawByte(']')
    }
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v NvidiaSmi) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonE60a21b8EncodeGithubComRaiProjectNvidiaSmi(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NvidiaSmi) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonE60a21b8EncodeGithubComRaiProjectNvidiaSmi(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *NvidiaSmi) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonE60a21b8DecodeGithubComRaiProjectNvidiaSmi(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NvidiaSmi) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonE60a21b8DecodeGithubComRaiProjectNvidiaSmi(l, v)
}
func easyjsonE60a21b8DecodeGithubComRaiProjectNvidiaSmi1(in *jlexer.Lexer, out *GPU) {
  isTopLevel := in.IsStart()
  if in.IsNull() {
    if isTopLevel {
      in.Consumed()
    }
    in.Skip()
    return
  }
  in.Delim('{')
  for !in.IsDelim('}') {
    key := in.UnsafeString()
    in.WantColon()
    if in.IsNull() {
       in.Skip()
       in.WantComma()
       continue
    }
    switch key {
    case "id":
      out.ID = string(in.String())
    case "mem_clock_clocks_gpu":
      out.MemClockClocksGpu = string(in.String())
    case "l_1_cache":
      out.L1Cache = string(in.String())
    case "product_name":
      out.ProductName = string(in.String())
    case "free_fb_memory_usage_gpu":
      out.FreeFbMemoryUsageGpu = string(in.String())
    case "power_state":
      out.PowerState = string(in.String())
    case "free":
      out.Free = string(in.String())
    case "retired_count_double_bit_retirement_retired_pages_gpu":
      out.RetiredCountDoubleBitRetirementRetiredPagesGpu = string(in.String())
    case "clocks_throttle_reason_unknown":
      out.ClocksThrottleReasonUnknown = string(in.String())
    case "clocks_throttle_reason_applications_clocks_setting":
      out.ClocksThrottleReasonApplicationsClocksSetting = string(in.String())
    case "processes":
      out.Processes = string(in.String())
    case "mem_clock_applications_clocks_gpu":
      out.MemClockApplicationsClocksGpu = string(in.String())
    case "l_2_cache_single_bit_aggregate_ecc_errors_gpu":
      out.L2CacheSingleBitAggregateEccErrorsGpu = string(in.String())
    case "current_link_gen":
      out.CurrentLinkGen = string(in.String())
    case "total_single_bit_volatile_ecc_errors_gpu":
      out.TotalSingleBitVolatileEccErrorsGpu = string(in.String())
    case "texture_memory_double_bit_volatile_ecc_errors_gpu":
      out.TextureMemoryDoubleBitVolatileEccErrorsGpu = string(in.String())
    case "l_1_cache_single_bit_aggregate_ecc_errors_gpu":
      out.L1CacheSingleBitAggregateEccErrorsGpu = string(in.String())
    case "pending_gom":
      out.PendingGom = string(in.String())
    case "auto_boost_default":
      out.AutoBoostDefault = string(in.String())
    case "graphics_clock_applications_clocks_gpu":
      out.GraphicsClockApplicationsClocksGpu = string(in.String())
    case "pci_bus_id":
      out.PciBusID = string(in.String())
    case "power_management":
      out.PowerManagement = string(in.String())
    case "device_memory_double_bit_aggregate_ecc_errors_gpu":
      out.DeviceMemoryDoubleBitAggregateEccErrorsGpu = string(in.String())
    case "board_id":
      out.BoardID = string(in.String())
    case "device_memory_double_bit_volatile_ecc_errors_gpu":
      out.DeviceMemoryDoubleBitVolatileEccErrorsGpu = string(in.String())
    case "supported_graphics_clock":
      if in.IsNull() {
        in.Skip()
        out.SupportedGraphicsClock = nil
      } else {
        in.Delim('[')
        if out.SupportedGraphicsClock == nil {
          if !in.IsDelim(']') {
            out.SupportedGraphicsClock = make([]string, 0, 4)
          } else {
            out.SupportedGraphicsClock = []string{}
          }
        } else { 
          out.SupportedGraphicsClock = (out.SupportedGraphicsClock)[:0]
        }
        for !in.IsDelim(']') {
          var v4 string
          v4 = string(in.String())
          out.SupportedGraphicsClock = append(out.SupportedGraphicsClock, v4)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "persistence_mode":
      out.PersistenceMode = string(in.String())
    case "mem_clock":
      out.MemClock = string(in.String())
    case "graphics_clock_clocks_gpu":
      out.GraphicsClockClocksGpu = string(in.String())
    case "used":
      out.Used = string(in.String())
    case "img_version":
      out.ImgVersion = string(in.String())
    case "used_fb_memory_usage_gpu":
      out.UsedFbMemoryUsageGpu = string(in.String())
    case "total_double_bit_aggregate_ecc_errors_gpu":
      out.TotalDoubleBitAggregateEccErrorsGpu = string(in.String())
    case "minor_number":
      out.MinorNumber = string(in.String())
    case "product_brand":
      out.ProductBrand = string(in.String())
    case "graphics_clock_default_applications_clocks_gpu":
      out.GraphicsClockDefaultApplicationsClocksGpu = string(in.String())
    case "total_fb_memory_usage_gpu":
      out.TotalFbMemoryUsageGpu = string(in.String())
    case "register_file_double_bit_volatile_ecc_errors_gpu":
      out.RegisterFileDoubleBitVolatileEccErrorsGpu = string(in.String())
    case "min_power_limit":
      out.MinPowerLimit = string(in.String())
    case "tx_util":
      out.TxUtil = string(in.String())
    case "texture_memory":
      out.TextureMemory = string(in.String())
    case "register_file_double_bit_aggregate_ecc_errors_gpu":
      out.RegisterFileDoubleBitAggregateEccErrorsGpu = string(in.String())
    case "performance_state":
      out.PerformanceState = string(in.String())
    case "current_dm":
      out.CurrentDm = string(in.String())
    case "pci_device_id":
      out.PciDeviceID = string(in.String())
    case "accounted_processes":
      out.AccountedProcesses = string(in.String())
    case "pending_retirement":
      out.PendingRetirement = string(in.String())
    case "total_double_bit_volatile_ecc_errors_gpu":
      out.TotalDoubleBitVolatileEccErrorsGpu = string(in.String())
    case "uuid":
      out.UUID = string(in.String())
    case "power_limit":
      out.PowerLimit = string(in.String())
    case "clocks_throttle_reason_hw_slowdown":
      out.ClocksThrottleReasonHwSlowdown = string(in.String())
    case "bridge_chip_fw":
      out.BridgeChipFw = string(in.String())
    case "replay_counter":
      out.ReplayCounter = string(in.String())
    case "l_2_cache_double_bit_aggregate_ecc_errors_gpu":
      out.L2CacheDoubleBitAggregateEccErrorsGpu = string(in.String())
    case "compute_mode":
      out.ComputeMode = string(in.String())
    case "fan_speed":
      out.FanSpeed = string(in.String())
    case "total":
      out.Total = string(in.String())
    case "sm_clock":
      out.SmClock = string(in.String())
    case "rx_util":
      out.RxUtil = string(in.String())
    case "graphics_clock":
      out.GraphicsClock = string(in.String())
    case "pwr_object":
      out.PwrObject = string(in.String())
    case "pci_bus":
      out.PciBus = string(in.String())
    case "decoder_util":
      out.DecoderUtil = string(in.String())
    case "pci_sub_system_id":
      out.PciSubSystemID = string(in.String())
    case "max_link_gen":
      out.MaxLinkGen = string(in.String())
    case "bridge_chip_type":
      out.BridgeChipType = string(in.String())
    case "sm_clock_clocks_gpu":
      out.SmClockClocksGpu = string(in.String())
    case "current_ecc":
      out.CurrentEcc = string(in.String())
    case "power_draw":
      out.PowerDraw = string(in.String())
    case "current_link_width":
      out.CurrentLinkWidth = string(in.String())
    case "auto_boost":
      out.AutoBoost = string(in.String())
    case "gpu_util":
      out.GpuUtil = string(in.String())
    case "pci_device":
      out.PciDevice = string(in.String())
    case "register_file":
      out.RegisterFile = string(in.String())
    case "l_2_cache":
      out.L2Cache = string(in.String())
    case "l_1_cache_double_bit_aggregate_ecc_errors_gpu":
      out.L1CacheDoubleBitAggregateEccErrorsGpu = string(in.String())
    case "retired_count":
      out.RetiredCount = string(in.String())
    case "pending_dm":
      out.PendingDm = string(in.String())
    case "accounting_mode_buffer_size":
      out.AccountingModeBufferSize = string(in.String())
    case "gpu_temp_slow_threshold":
      out.GpuTempSlowThreshold = string(in.String())
    case "oem_object":
      out.OemObject = string(in.String())
    case "texture_memory_single_bit_aggregate_ecc_errors_gpu":
      out.TextureMemorySingleBitAggregateEccErrorsGpu = string(in.String())
    case "register_file_single_bit_aggregate_ecc_errors_gpu":
      out.RegisterFileSingleBitAggregateEccErrorsGpu = string(in.String())
    case "max_link_width":
      out.MaxLinkWidth = string(in.String())
    case "texture_memory_double_bit_aggregate_ecc_errors_gpu":
      out.TextureMemoryDoubleBitAggregateEccErrorsGpu = string(in.String())
    case "clocks_throttle_reason_gpu_idle":
      out.ClocksThrottleReasonGpuIdle = string(in.String())
    case "multigpu_board":
      out.MultigpuBoard = string(in.String())
    case "gpu_temp_max_threshold":
      out.GpuTempMaxThreshold = string(in.String())
    case "max_power_limit":
      out.MaxPowerLimit = string(in.String())
    case "l_2_cache_double_bit_volatile_ecc_errors_gpu":
      out.L2CacheDoubleBitVolatileEccErrorsGpu = string(in.String())
    case "pci_domain":
      out.PciDomain = string(in.String())
    case "mem_clock_default_applications_clocks_gpu":
      out.MemClockDefaultApplicationsClocksGpu = string(in.String())
    case "vbios_version":
      out.VbiosVersion = string(in.String())
    case "retired_page_addresses":
      out.RetiredPageAddresses = string(in.String())
    case "gpu_temp":
      out.GpuTemp = string(in.String())
    case "accounting_mode":
      out.AccountingMode = string(in.String())
    case "l_1_cache_double_bit_volatile_ecc_errors_gpu":
      out.L1CacheDoubleBitVolatileEccErrorsGpu = string(in.String())
    case "device_memory_single_bit_aggregate_ecc_errors_gpu":
      out.DeviceMemorySingleBitAggregateEccErrorsGpu = string(in.String())
    case "display_active":
      out.DisplayActive = string(in.String())
    case "default_power_limit":
      out.DefaultPowerLimit = string(in.String())
    case "encoder_util":
      out.EncoderUtil = string(in.String())
    case "serial":
      out.Serial = string(in.String())
    case "enforced_power_limit":
      out.EnforcedPowerLimit = string(in.String())
    case "retired_page_addresses_double_bit_retirement_retired_pages_gpu":
      out.RetiredPageAddressesDoubleBitRetirementRetiredPagesGpu = string(in.String())
    case "ecc_object":
      out.EccObject = string(in.String())
    case "value":
      if in.IsNull() {
        in.Skip()
        out.Value = nil
      } else {
        in.Delim('[')
        if out.Value == nil {
          if !in.IsDelim(']') {
            out.Value = make([]string, 0, 4)
          } else {
            out.Value = []string{}
          }
        } else { 
          out.Value = (out.Value)[:0]
        }
        for !in.IsDelim(']') {
          var v5 string
          v5 = string(in.String())
          out.Value = append(out.Value, v5)
          in.WantComma()
        }
        in.Delim(']')
      }
    case "display_mode":
      out.DisplayMode = string(in.String())
    case "device_memory":
      out.DeviceMemory = string(in.String())
    case "pending_ecc":
      out.PendingEcc = string(in.String())
    case "clocks_throttle_reason_sw_power_cap":
      out.ClocksThrottleReasonSwPowerCap = string(in.String())
    case "total_single_bit_aggregate_ecc_errors_gpu":
      out.TotalSingleBitAggregateEccErrorsGpu = string(in.String())
    case "current_gom":
      out.CurrentGom = string(in.String())
    case "memory_util":
      out.MemoryUtil = string(in.String())
    default:
      in.AddError(&jlexer.LexerError{
          Offset: in.GetPos(),
          Reason: "unknown field",
          Data: key,
      })
    }
    in.WantComma()
  }
  in.Delim('}')
  if isTopLevel {
    in.Consumed()
  }
}
func easyjsonE60a21b8EncodeGithubComRaiProjectNvidiaSmi1(out *jwriter.Writer, in GPU) {
  out.RawByte('{')
  first := true
  _ = first
  {
    const prefix string = ",\"id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ID))
  }
  {
    const prefix string = ",\"mem_clock_clocks_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.MemClockClocksGpu))
  }
  {
    const prefix string = ",\"l_1_cache\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.L1Cache))
  }
  {
    const prefix string = ",\"product_name\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ProductName))
  }
  {
    const prefix string = ",\"free_fb_memory_usage_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.FreeFbMemoryUsageGpu))
  }
  {
    const prefix string = ",\"power_state\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.PowerState))
  }
  {
    const prefix string = ",\"free\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Free))
  }
  {
    const prefix string = ",\"retired_count_double_bit_retirement_retired_pages_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.RetiredCountDoubleBitRetirementRetiredPagesGpu))
  }
  {
    const prefix string = ",\"clocks_throttle_reason_unknown\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ClocksThrottleReasonUnknown))
  }
  {
    const prefix string = ",\"clocks_throttle_reason_applications_clocks_setting\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ClocksThrottleReasonApplicationsClocksSetting))
  }
  {
    const prefix string = ",\"processes\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Processes))
  }
  {
    const prefix string = ",\"mem_clock_applications_clocks_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.MemClockApplicationsClocksGpu))
  }
  {
    const prefix string = ",\"l_2_cache_single_bit_aggregate_ecc_errors_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.L2CacheSingleBitAggregateEccErrorsGpu))
  }
  {
    const prefix string = ",\"current_link_gen\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.CurrentLinkGen))
  }
  {
    const prefix string = ",\"total_single_bit_volatile_ecc_errors_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.TotalSingleBitVolatileEccErrorsGpu))
  }
  {
    const prefix string = ",\"texture_memory_double_bit_volatile_ecc_errors_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.TextureMemoryDoubleBitVolatileEccErrorsGpu))
  }
  {
    const prefix string = ",\"l_1_cache_single_bit_aggregate_ecc_errors_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.L1CacheSingleBitAggregateEccErrorsGpu))
  }
  {
    const prefix string = ",\"pending_gom\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.PendingGom))
  }
  {
    const prefix string = ",\"auto_boost_default\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.AutoBoostDefault))
  }
  {
    const prefix string = ",\"graphics_clock_applications_clocks_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.GraphicsClockApplicationsClocksGpu))
  }
  {
    const prefix string = ",\"pci_bus_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.PciBusID))
  }
  {
    const prefix string = ",\"power_management\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.PowerManagement))
  }
  {
    const prefix string = ",\"device_memory_double_bit_aggregate_ecc_errors_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.DeviceMemoryDoubleBitAggregateEccErrorsGpu))
  }
  {
    const prefix string = ",\"board_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.BoardID))
  }
  {
    const prefix string = ",\"device_memory_double_bit_volatile_ecc_errors_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.DeviceMemoryDoubleBitVolatileEccErrorsGpu))
  }
  {
    const prefix string = ",\"supported_graphics_clock\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    if in.SupportedGraphicsClock == nil && (out.Flags & jwriter.NilSliceAsEmpty) == 0 {
      out.RawString("null")
    } else {
      out.RawByte('[')
      for v6, v7 := range in.SupportedGraphicsClock {
        if v6 > 0 {
          out.RawByte(',')
        }
        out.String(string(v7))
      }
      out.RawByte(']')
    }
  }
  {
    const prefix string = ",\"persistence_mode\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.PersistenceMode))
  }
  {
    const prefix string = ",\"mem_clock\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.MemClock))
  }
  {
    const prefix string = ",\"graphics_clock_clocks_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.GraphicsClockClocksGpu))
  }
  {
    const prefix string = ",\"used\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Used))
  }
  {
    const prefix string = ",\"img_version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ImgVersion))
  }
  {
    const prefix string = ",\"used_fb_memory_usage_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.UsedFbMemoryUsageGpu))
  }
  {
    const prefix string = ",\"total_double_bit_aggregate_ecc_errors_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.TotalDoubleBitAggregateEccErrorsGpu))
  }
  {
    const prefix string = ",\"minor_number\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.MinorNumber))
  }
  {
    const prefix string = ",\"product_brand\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ProductBrand))
  }
  {
    const prefix string = ",\"graphics_clock_default_applications_clocks_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.GraphicsClockDefaultApplicationsClocksGpu))
  }
  {
    const prefix string = ",\"total_fb_memory_usage_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.TotalFbMemoryUsageGpu))
  }
  {
    const prefix string = ",\"register_file_double_bit_volatile_ecc_errors_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.RegisterFileDoubleBitVolatileEccErrorsGpu))
  }
  {
    const prefix string = ",\"min_power_limit\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.MinPowerLimit))
  }
  {
    const prefix string = ",\"tx_util\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.TxUtil))
  }
  {
    const prefix string = ",\"texture_memory\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.TextureMemory))
  }
  {
    const prefix string = ",\"register_file_double_bit_aggregate_ecc_errors_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.RegisterFileDoubleBitAggregateEccErrorsGpu))
  }
  {
    const prefix string = ",\"performance_state\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.PerformanceState))
  }
  {
    const prefix string = ",\"current_dm\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.CurrentDm))
  }
  {
    const prefix string = ",\"pci_device_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.PciDeviceID))
  }
  {
    const prefix string = ",\"accounted_processes\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.AccountedProcesses))
  }
  {
    const prefix string = ",\"pending_retirement\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.PendingRetirement))
  }
  {
    const prefix string = ",\"total_double_bit_volatile_ecc_errors_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.TotalDoubleBitVolatileEccErrorsGpu))
  }
  {
    const prefix string = ",\"uuid\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.UUID))
  }
  {
    const prefix string = ",\"power_limit\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.PowerLimit))
  }
  {
    const prefix string = ",\"clocks_throttle_reason_hw_slowdown\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ClocksThrottleReasonHwSlowdown))
  }
  {
    const prefix string = ",\"bridge_chip_fw\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.BridgeChipFw))
  }
  {
    const prefix string = ",\"replay_counter\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ReplayCounter))
  }
  {
    const prefix string = ",\"l_2_cache_double_bit_aggregate_ecc_errors_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.L2CacheDoubleBitAggregateEccErrorsGpu))
  }
  {
    const prefix string = ",\"compute_mode\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ComputeMode))
  }
  {
    const prefix string = ",\"fan_speed\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.FanSpeed))
  }
  {
    const prefix string = ",\"total\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Total))
  }
  {
    const prefix string = ",\"sm_clock\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.SmClock))
  }
  {
    const prefix string = ",\"rx_util\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.RxUtil))
  }
  {
    const prefix string = ",\"graphics_clock\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.GraphicsClock))
  }
  {
    const prefix string = ",\"pwr_object\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.PwrObject))
  }
  {
    const prefix string = ",\"pci_bus\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.PciBus))
  }
  {
    const prefix string = ",\"decoder_util\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.DecoderUtil))
  }
  {
    const prefix string = ",\"pci_sub_system_id\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.PciSubSystemID))
  }
  {
    const prefix string = ",\"max_link_gen\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.MaxLinkGen))
  }
  {
    const prefix string = ",\"bridge_chip_type\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.BridgeChipType))
  }
  {
    const prefix string = ",\"sm_clock_clocks_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.SmClockClocksGpu))
  }
  {
    const prefix string = ",\"current_ecc\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.CurrentEcc))
  }
  {
    const prefix string = ",\"power_draw\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.PowerDraw))
  }
  {
    const prefix string = ",\"current_link_width\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.CurrentLinkWidth))
  }
  {
    const prefix string = ",\"auto_boost\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.AutoBoost))
  }
  {
    const prefix string = ",\"gpu_util\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.GpuUtil))
  }
  {
    const prefix string = ",\"pci_device\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.PciDevice))
  }
  {
    const prefix string = ",\"register_file\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.RegisterFile))
  }
  {
    const prefix string = ",\"l_2_cache\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.L2Cache))
  }
  {
    const prefix string = ",\"l_1_cache_double_bit_aggregate_ecc_errors_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.L1CacheDoubleBitAggregateEccErrorsGpu))
  }
  {
    const prefix string = ",\"retired_count\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.RetiredCount))
  }
  {
    const prefix string = ",\"pending_dm\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.PendingDm))
  }
  {
    const prefix string = ",\"accounting_mode_buffer_size\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.AccountingModeBufferSize))
  }
  {
    const prefix string = ",\"gpu_temp_slow_threshold\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.GpuTempSlowThreshold))
  }
  {
    const prefix string = ",\"oem_object\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.OemObject))
  }
  {
    const prefix string = ",\"texture_memory_single_bit_aggregate_ecc_errors_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.TextureMemorySingleBitAggregateEccErrorsGpu))
  }
  {
    const prefix string = ",\"register_file_single_bit_aggregate_ecc_errors_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.RegisterFileSingleBitAggregateEccErrorsGpu))
  }
  {
    const prefix string = ",\"max_link_width\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.MaxLinkWidth))
  }
  {
    const prefix string = ",\"texture_memory_double_bit_aggregate_ecc_errors_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.TextureMemoryDoubleBitAggregateEccErrorsGpu))
  }
  {
    const prefix string = ",\"clocks_throttle_reason_gpu_idle\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ClocksThrottleReasonGpuIdle))
  }
  {
    const prefix string = ",\"multigpu_board\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.MultigpuBoard))
  }
  {
    const prefix string = ",\"gpu_temp_max_threshold\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.GpuTempMaxThreshold))
  }
  {
    const prefix string = ",\"max_power_limit\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.MaxPowerLimit))
  }
  {
    const prefix string = ",\"l_2_cache_double_bit_volatile_ecc_errors_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.L2CacheDoubleBitVolatileEccErrorsGpu))
  }
  {
    const prefix string = ",\"pci_domain\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.PciDomain))
  }
  {
    const prefix string = ",\"mem_clock_default_applications_clocks_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.MemClockDefaultApplicationsClocksGpu))
  }
  {
    const prefix string = ",\"vbios_version\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.VbiosVersion))
  }
  {
    const prefix string = ",\"retired_page_addresses\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.RetiredPageAddresses))
  }
  {
    const prefix string = ",\"gpu_temp\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.GpuTemp))
  }
  {
    const prefix string = ",\"accounting_mode\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.AccountingMode))
  }
  {
    const prefix string = ",\"l_1_cache_double_bit_volatile_ecc_errors_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.L1CacheDoubleBitVolatileEccErrorsGpu))
  }
  {
    const prefix string = ",\"device_memory_single_bit_aggregate_ecc_errors_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.DeviceMemorySingleBitAggregateEccErrorsGpu))
  }
  {
    const prefix string = ",\"display_active\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.DisplayActive))
  }
  {
    const prefix string = ",\"default_power_limit\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.DefaultPowerLimit))
  }
  {
    const prefix string = ",\"encoder_util\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.EncoderUtil))
  }
  {
    const prefix string = ",\"serial\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.Serial))
  }
  {
    const prefix string = ",\"enforced_power_limit\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.EnforcedPowerLimit))
  }
  {
    const prefix string = ",\"retired_page_addresses_double_bit_retirement_retired_pages_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.RetiredPageAddressesDoubleBitRetirementRetiredPagesGpu))
  }
  {
    const prefix string = ",\"ecc_object\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.EccObject))
  }
  {
    const prefix string = ",\"value\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    if in.Value == nil && (out.Flags & jwriter.NilSliceAsEmpty) == 0 {
      out.RawString("null")
    } else {
      out.RawByte('[')
      for v8, v9 := range in.Value {
        if v8 > 0 {
          out.RawByte(',')
        }
        out.String(string(v9))
      }
      out.RawByte(']')
    }
  }
  {
    const prefix string = ",\"display_mode\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.DisplayMode))
  }
  {
    const prefix string = ",\"device_memory\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.DeviceMemory))
  }
  {
    const prefix string = ",\"pending_ecc\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.PendingEcc))
  }
  {
    const prefix string = ",\"clocks_throttle_reason_sw_power_cap\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.ClocksThrottleReasonSwPowerCap))
  }
  {
    const prefix string = ",\"total_single_bit_aggregate_ecc_errors_gpu\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.TotalSingleBitAggregateEccErrorsGpu))
  }
  {
    const prefix string = ",\"current_gom\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.CurrentGom))
  }
  {
    const prefix string = ",\"memory_util\":"
    if first {
      first = false
      out.RawString(prefix[1:])
    } else {
      out.RawString(prefix)
    }
    out.String(string(in.MemoryUtil))
  }
  out.RawByte('}')
}
// MarshalJSON supports json.Marshaler interface
func (v GPU) MarshalJSON() ([]byte, error) {
  w := jwriter.Writer{}
  easyjsonE60a21b8EncodeGithubComRaiProjectNvidiaSmi1(&w, v)
  return w.Buffer.BuildBytes(), w.Error
}
// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GPU) MarshalEasyJSON(w *jwriter.Writer) {
  easyjsonE60a21b8EncodeGithubComRaiProjectNvidiaSmi1(w, v)
}
// UnmarshalJSON supports json.Unmarshaler interface
func (v *GPU) UnmarshalJSON(data []byte) error {
  r := jlexer.Lexer{Data: data}
  easyjsonE60a21b8DecodeGithubComRaiProjectNvidiaSmi1(&r, v)
  return r.Error()
}
// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GPU) UnmarshalEasyJSON(l *jlexer.Lexer) {
  easyjsonE60a21b8DecodeGithubComRaiProjectNvidiaSmi1(l, v)
}
