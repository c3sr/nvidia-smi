// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package nvidiasmi

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC80ae7adDecodeGithubComRaiProjectNvidiaSmi(in *jlexer.Lexer, out *NvidiaSmi) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "timestamp":
			out.Timestamp = string(in.String())
		case "driver_version":
			out.DriverVersion = string(in.String())
		case "attached_gpus":
			out.AttachedGpus = string(in.String())
		case "gpus":
			if in.IsNull() {
				in.Skip()
				out.GPUS = nil
			} else {
				in.Delim('[')
				if out.GPUS == nil {
					if !in.IsDelim(']') {
						out.GPUS = make([]GPU, 0, 1)
					} else {
						out.GPUS = []GPU{}
					}
				} else {
					out.GPUS = (out.GPUS)[:0]
				}
				for !in.IsDelim(']') {
					var v1 GPU
					(v1).UnmarshalEasyJSON(in)
					out.GPUS = append(out.GPUS, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComRaiProjectNvidiaSmi(out *jwriter.Writer, in NvidiaSmi) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"timestamp\":")
	out.String(string(in.Timestamp))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"driver_version\":")
	out.String(string(in.DriverVersion))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"attached_gpus\":")
	out.String(string(in.AttachedGpus))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"gpus\":")
	if in.GPUS == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.GPUS {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NvidiaSmi) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComRaiProjectNvidiaSmi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NvidiaSmi) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComRaiProjectNvidiaSmi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NvidiaSmi) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComRaiProjectNvidiaSmi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NvidiaSmi) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComRaiProjectNvidiaSmi(l, v)
}
func easyjsonC80ae7adDecodeGithubComRaiProjectNvidiaSmi1(in *jlexer.Lexer, out *GPU) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "mem_clock_clocks_gpu":
			out.MemClockClocksGpu = string(in.String())
		case "l_1_cache":
			out.L1Cache = string(in.String())
		case "product_name":
			out.ProductName = string(in.String())
		case "free_fb_memory_usage_gpu":
			out.FreeFbMemoryUsageGpu = string(in.String())
		case "power_state":
			out.PowerState = string(in.String())
		case "free":
			out.Free = string(in.String())
		case "retired_count_double_bit_retirement_retired_pages_gpu":
			out.RetiredCountDoubleBitRetirementRetiredPagesGpu = string(in.String())
		case "clocks_throttle_reason_unknown":
			out.ClocksThrottleReasonUnknown = string(in.String())
		case "clocks_throttle_reason_applications_clocks_setting":
			out.ClocksThrottleReasonApplicationsClocksSetting = string(in.String())
		case "processes":
			out.Processes = string(in.String())
		case "mem_clock_applications_clocks_gpu":
			out.MemClockApplicationsClocksGpu = string(in.String())
		case "l_2_cache_single_bit_aggregate_ecc_errors_gpu":
			out.L2CacheSingleBitAggregateEccErrorsGpu = string(in.String())
		case "current_link_gen":
			out.CurrentLinkGen = string(in.String())
		case "total_single_bit_volatile_ecc_errors_gpu":
			out.TotalSingleBitVolatileEccErrorsGpu = string(in.String())
		case "texture_memory_double_bit_volatile_ecc_errors_gpu":
			out.TextureMemoryDoubleBitVolatileEccErrorsGpu = string(in.String())
		case "l_1_cache_single_bit_aggregate_ecc_errors_gpu":
			out.L1CacheSingleBitAggregateEccErrorsGpu = string(in.String())
		case "pending_gom":
			out.PendingGom = string(in.String())
		case "auto_boost_default":
			out.AutoBoostDefault = string(in.String())
		case "graphics_clock_applications_clocks_gpu":
			out.GraphicsClockApplicationsClocksGpu = string(in.String())
		case "pci_bus_id":
			out.PciBusID = string(in.String())
		case "power_management":
			out.PowerManagement = string(in.String())
		case "device_memory_double_bit_aggregate_ecc_errors_gpu":
			out.DeviceMemoryDoubleBitAggregateEccErrorsGpu = string(in.String())
		case "board_id":
			out.BoardID = string(in.String())
		case "device_memory_double_bit_volatile_ecc_errors_gpu":
			out.DeviceMemoryDoubleBitVolatileEccErrorsGpu = string(in.String())
		case "supported_graphics_clock":
			if in.IsNull() {
				in.Skip()
				out.SupportedGraphicsClock = nil
			} else {
				in.Delim('[')
				if out.SupportedGraphicsClock == nil {
					if !in.IsDelim(']') {
						out.SupportedGraphicsClock = make([]string, 0, 4)
					} else {
						out.SupportedGraphicsClock = []string{}
					}
				} else {
					out.SupportedGraphicsClock = (out.SupportedGraphicsClock)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.SupportedGraphicsClock = append(out.SupportedGraphicsClock, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "persistence_mode":
			out.PersistenceMode = string(in.String())
		case "mem_clock":
			out.MemClock = string(in.String())
		case "graphics_clock_clocks_gpu":
			out.GraphicsClockClocksGpu = string(in.String())
		case "used":
			out.Used = string(in.String())
		case "img_version":
			out.ImgVersion = string(in.String())
		case "used_fb_memory_usage_gpu":
			out.UsedFbMemoryUsageGpu = string(in.String())
		case "total_double_bit_aggregate_ecc_errors_gpu":
			out.TotalDoubleBitAggregateEccErrorsGpu = string(in.String())
		case "minor_number":
			out.MinorNumber = string(in.String())
		case "product_brand":
			out.ProductBrand = string(in.String())
		case "graphics_clock_default_applications_clocks_gpu":
			out.GraphicsClockDefaultApplicationsClocksGpu = string(in.String())
		case "total_fb_memory_usage_gpu":
			out.TotalFbMemoryUsageGpu = string(in.String())
		case "register_file_double_bit_volatile_ecc_errors_gpu":
			out.RegisterFileDoubleBitVolatileEccErrorsGpu = string(in.String())
		case "min_power_limit":
			out.MinPowerLimit = string(in.String())
		case "tx_util":
			out.TxUtil = string(in.String())
		case "texture_memory":
			out.TextureMemory = string(in.String())
		case "register_file_double_bit_aggregate_ecc_errors_gpu":
			out.RegisterFileDoubleBitAggregateEccErrorsGpu = string(in.String())
		case "performance_state":
			out.PerformanceState = string(in.String())
		case "current_dm":
			out.CurrentDm = string(in.String())
		case "pci_device_id":
			out.PciDeviceID = string(in.String())
		case "accounted_processes":
			out.AccountedProcesses = string(in.String())
		case "pending_retirement":
			out.PendingRetirement = string(in.String())
		case "total_double_bit_volatile_ecc_errors_gpu":
			out.TotalDoubleBitVolatileEccErrorsGpu = string(in.String())
		case "uuid":
			out.UUID = string(in.String())
		case "power_limit":
			out.PowerLimit = string(in.String())
		case "clocks_throttle_reason_hw_slowdown":
			out.ClocksThrottleReasonHwSlowdown = string(in.String())
		case "bridge_chip_fw":
			out.BridgeChipFw = string(in.String())
		case "replay_counter":
			out.ReplayCounter = string(in.String())
		case "l_2_cache_double_bit_aggregate_ecc_errors_gpu":
			out.L2CacheDoubleBitAggregateEccErrorsGpu = string(in.String())
		case "compute_mode":
			out.ComputeMode = string(in.String())
		case "fan_speed":
			out.FanSpeed = string(in.String())
		case "total":
			out.Total = string(in.String())
		case "sm_clock":
			out.SmClock = string(in.String())
		case "rx_util":
			out.RxUtil = string(in.String())
		case "graphics_clock":
			out.GraphicsClock = string(in.String())
		case "pwr_object":
			out.PwrObject = string(in.String())
		case "pci_bus":
			out.PciBus = string(in.String())
		case "decoder_util":
			out.DecoderUtil = string(in.String())
		case "pci_sub_system_id":
			out.PciSubSystemID = string(in.String())
		case "max_link_gen":
			out.MaxLinkGen = string(in.String())
		case "bridge_chip_type":
			out.BridgeChipType = string(in.String())
		case "sm_clock_clocks_gpu":
			out.SmClockClocksGpu = string(in.String())
		case "current_ecc":
			out.CurrentEcc = string(in.String())
		case "power_draw":
			out.PowerDraw = string(in.String())
		case "current_link_width":
			out.CurrentLinkWidth = string(in.String())
		case "auto_boost":
			out.AutoBoost = string(in.String())
		case "gpu_util":
			out.GpuUtil = string(in.String())
		case "pci_device":
			out.PciDevice = string(in.String())
		case "register_file":
			out.RegisterFile = string(in.String())
		case "l_2_cache":
			out.L2Cache = string(in.String())
		case "l_1_cache_double_bit_aggregate_ecc_errors_gpu":
			out.L1CacheDoubleBitAggregateEccErrorsGpu = string(in.String())
		case "retired_count":
			out.RetiredCount = string(in.String())
		case "pending_dm":
			out.PendingDm = string(in.String())
		case "accounting_mode_buffer_size":
			out.AccountingModeBufferSize = string(in.String())
		case "gpu_temp_slow_threshold":
			out.GpuTempSlowThreshold = string(in.String())
		case "oem_object":
			out.OemObject = string(in.String())
		case "texture_memory_single_bit_aggregate_ecc_errors_gpu":
			out.TextureMemorySingleBitAggregateEccErrorsGpu = string(in.String())
		case "register_file_single_bit_aggregate_ecc_errors_gpu":
			out.RegisterFileSingleBitAggregateEccErrorsGpu = string(in.String())
		case "max_link_width":
			out.MaxLinkWidth = string(in.String())
		case "texture_memory_double_bit_aggregate_ecc_errors_gpu":
			out.TextureMemoryDoubleBitAggregateEccErrorsGpu = string(in.String())
		case "clocks_throttle_reason_gpu_idle":
			out.ClocksThrottleReasonGpuIdle = string(in.String())
		case "multigpu_board":
			out.MultigpuBoard = string(in.String())
		case "gpu_temp_max_threshold":
			out.GpuTempMaxThreshold = string(in.String())
		case "max_power_limit":
			out.MaxPowerLimit = string(in.String())
		case "l_2_cache_double_bit_volatile_ecc_errors_gpu":
			out.L2CacheDoubleBitVolatileEccErrorsGpu = string(in.String())
		case "pci_domain":
			out.PciDomain = string(in.String())
		case "mem_clock_default_applications_clocks_gpu":
			out.MemClockDefaultApplicationsClocksGpu = string(in.String())
		case "vbios_version":
			out.VbiosVersion = string(in.String())
		case "retired_page_addresses":
			out.RetiredPageAddresses = string(in.String())
		case "gpu_temp":
			out.GpuTemp = string(in.String())
		case "accounting_mode":
			out.AccountingMode = string(in.String())
		case "l_1_cache_double_bit_volatile_ecc_errors_gpu":
			out.L1CacheDoubleBitVolatileEccErrorsGpu = string(in.String())
		case "device_memory_single_bit_aggregate_ecc_errors_gpu":
			out.DeviceMemorySingleBitAggregateEccErrorsGpu = string(in.String())
		case "display_active":
			out.DisplayActive = string(in.String())
		case "default_power_limit":
			out.DefaultPowerLimit = string(in.String())
		case "encoder_util":
			out.EncoderUtil = string(in.String())
		case "serial":
			out.Serial = string(in.String())
		case "enforced_power_limit":
			out.EnforcedPowerLimit = string(in.String())
		case "retired_page_addresses_double_bit_retirement_retired_pages_gpu":
			out.RetiredPageAddressesDoubleBitRetirementRetiredPagesGpu = string(in.String())
		case "ecc_object":
			out.EccObject = string(in.String())
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				in.Delim('[')
				if out.Value == nil {
					if !in.IsDelim(']') {
						out.Value = make([]string, 0, 4)
					} else {
						out.Value = []string{}
					}
				} else {
					out.Value = (out.Value)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.Value = append(out.Value, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "display_mode":
			out.DisplayMode = string(in.String())
		case "device_memory":
			out.DeviceMemory = string(in.String())
		case "pending_ecc":
			out.PendingEcc = string(in.String())
		case "clocks_throttle_reason_sw_power_cap":
			out.ClocksThrottleReasonSwPowerCap = string(in.String())
		case "total_single_bit_aggregate_ecc_errors_gpu":
			out.TotalSingleBitAggregateEccErrorsGpu = string(in.String())
		case "current_gom":
			out.CurrentGom = string(in.String())
		case "memory_util":
			out.MemoryUtil = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeGithubComRaiProjectNvidiaSmi1(out *jwriter.Writer, in GPU) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mem_clock_clocks_gpu\":")
	out.String(string(in.MemClockClocksGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"l_1_cache\":")
	out.String(string(in.L1Cache))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"product_name\":")
	out.String(string(in.ProductName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"free_fb_memory_usage_gpu\":")
	out.String(string(in.FreeFbMemoryUsageGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"power_state\":")
	out.String(string(in.PowerState))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"free\":")
	out.String(string(in.Free))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"retired_count_double_bit_retirement_retired_pages_gpu\":")
	out.String(string(in.RetiredCountDoubleBitRetirementRetiredPagesGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"clocks_throttle_reason_unknown\":")
	out.String(string(in.ClocksThrottleReasonUnknown))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"clocks_throttle_reason_applications_clocks_setting\":")
	out.String(string(in.ClocksThrottleReasonApplicationsClocksSetting))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"processes\":")
	out.String(string(in.Processes))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mem_clock_applications_clocks_gpu\":")
	out.String(string(in.MemClockApplicationsClocksGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"l_2_cache_single_bit_aggregate_ecc_errors_gpu\":")
	out.String(string(in.L2CacheSingleBitAggregateEccErrorsGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"current_link_gen\":")
	out.String(string(in.CurrentLinkGen))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"total_single_bit_volatile_ecc_errors_gpu\":")
	out.String(string(in.TotalSingleBitVolatileEccErrorsGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"texture_memory_double_bit_volatile_ecc_errors_gpu\":")
	out.String(string(in.TextureMemoryDoubleBitVolatileEccErrorsGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"l_1_cache_single_bit_aggregate_ecc_errors_gpu\":")
	out.String(string(in.L1CacheSingleBitAggregateEccErrorsGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pending_gom\":")
	out.String(string(in.PendingGom))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"auto_boost_default\":")
	out.String(string(in.AutoBoostDefault))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"graphics_clock_applications_clocks_gpu\":")
	out.String(string(in.GraphicsClockApplicationsClocksGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pci_bus_id\":")
	out.String(string(in.PciBusID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"power_management\":")
	out.String(string(in.PowerManagement))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"device_memory_double_bit_aggregate_ecc_errors_gpu\":")
	out.String(string(in.DeviceMemoryDoubleBitAggregateEccErrorsGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"board_id\":")
	out.String(string(in.BoardID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"device_memory_double_bit_volatile_ecc_errors_gpu\":")
	out.String(string(in.DeviceMemoryDoubleBitVolatileEccErrorsGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"supported_graphics_clock\":")
	if in.SupportedGraphicsClock == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v6, v7 := range in.SupportedGraphicsClock {
			if v6 > 0 {
				out.RawByte(',')
			}
			out.String(string(v7))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"persistence_mode\":")
	out.String(string(in.PersistenceMode))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mem_clock\":")
	out.String(string(in.MemClock))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"graphics_clock_clocks_gpu\":")
	out.String(string(in.GraphicsClockClocksGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"used\":")
	out.String(string(in.Used))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"img_version\":")
	out.String(string(in.ImgVersion))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"used_fb_memory_usage_gpu\":")
	out.String(string(in.UsedFbMemoryUsageGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"total_double_bit_aggregate_ecc_errors_gpu\":")
	out.String(string(in.TotalDoubleBitAggregateEccErrorsGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"minor_number\":")
	out.String(string(in.MinorNumber))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"product_brand\":")
	out.String(string(in.ProductBrand))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"graphics_clock_default_applications_clocks_gpu\":")
	out.String(string(in.GraphicsClockDefaultApplicationsClocksGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"total_fb_memory_usage_gpu\":")
	out.String(string(in.TotalFbMemoryUsageGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"register_file_double_bit_volatile_ecc_errors_gpu\":")
	out.String(string(in.RegisterFileDoubleBitVolatileEccErrorsGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"min_power_limit\":")
	out.String(string(in.MinPowerLimit))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"tx_util\":")
	out.String(string(in.TxUtil))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"texture_memory\":")
	out.String(string(in.TextureMemory))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"register_file_double_bit_aggregate_ecc_errors_gpu\":")
	out.String(string(in.RegisterFileDoubleBitAggregateEccErrorsGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"performance_state\":")
	out.String(string(in.PerformanceState))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"current_dm\":")
	out.String(string(in.CurrentDm))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pci_device_id\":")
	out.String(string(in.PciDeviceID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"accounted_processes\":")
	out.String(string(in.AccountedProcesses))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pending_retirement\":")
	out.String(string(in.PendingRetirement))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"total_double_bit_volatile_ecc_errors_gpu\":")
	out.String(string(in.TotalDoubleBitVolatileEccErrorsGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"uuid\":")
	out.String(string(in.UUID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"power_limit\":")
	out.String(string(in.PowerLimit))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"clocks_throttle_reason_hw_slowdown\":")
	out.String(string(in.ClocksThrottleReasonHwSlowdown))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"bridge_chip_fw\":")
	out.String(string(in.BridgeChipFw))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"replay_counter\":")
	out.String(string(in.ReplayCounter))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"l_2_cache_double_bit_aggregate_ecc_errors_gpu\":")
	out.String(string(in.L2CacheDoubleBitAggregateEccErrorsGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"compute_mode\":")
	out.String(string(in.ComputeMode))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"fan_speed\":")
	out.String(string(in.FanSpeed))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"total\":")
	out.String(string(in.Total))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sm_clock\":")
	out.String(string(in.SmClock))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rx_util\":")
	out.String(string(in.RxUtil))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"graphics_clock\":")
	out.String(string(in.GraphicsClock))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pwr_object\":")
	out.String(string(in.PwrObject))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pci_bus\":")
	out.String(string(in.PciBus))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"decoder_util\":")
	out.String(string(in.DecoderUtil))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pci_sub_system_id\":")
	out.String(string(in.PciSubSystemID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"max_link_gen\":")
	out.String(string(in.MaxLinkGen))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"bridge_chip_type\":")
	out.String(string(in.BridgeChipType))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sm_clock_clocks_gpu\":")
	out.String(string(in.SmClockClocksGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"current_ecc\":")
	out.String(string(in.CurrentEcc))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"power_draw\":")
	out.String(string(in.PowerDraw))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"current_link_width\":")
	out.String(string(in.CurrentLinkWidth))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"auto_boost\":")
	out.String(string(in.AutoBoost))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"gpu_util\":")
	out.String(string(in.GpuUtil))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pci_device\":")
	out.String(string(in.PciDevice))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"register_file\":")
	out.String(string(in.RegisterFile))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"l_2_cache\":")
	out.String(string(in.L2Cache))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"l_1_cache_double_bit_aggregate_ecc_errors_gpu\":")
	out.String(string(in.L1CacheDoubleBitAggregateEccErrorsGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"retired_count\":")
	out.String(string(in.RetiredCount))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pending_dm\":")
	out.String(string(in.PendingDm))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"accounting_mode_buffer_size\":")
	out.String(string(in.AccountingModeBufferSize))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"gpu_temp_slow_threshold\":")
	out.String(string(in.GpuTempSlowThreshold))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"oem_object\":")
	out.String(string(in.OemObject))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"texture_memory_single_bit_aggregate_ecc_errors_gpu\":")
	out.String(string(in.TextureMemorySingleBitAggregateEccErrorsGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"register_file_single_bit_aggregate_ecc_errors_gpu\":")
	out.String(string(in.RegisterFileSingleBitAggregateEccErrorsGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"max_link_width\":")
	out.String(string(in.MaxLinkWidth))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"texture_memory_double_bit_aggregate_ecc_errors_gpu\":")
	out.String(string(in.TextureMemoryDoubleBitAggregateEccErrorsGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"clocks_throttle_reason_gpu_idle\":")
	out.String(string(in.ClocksThrottleReasonGpuIdle))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"multigpu_board\":")
	out.String(string(in.MultigpuBoard))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"gpu_temp_max_threshold\":")
	out.String(string(in.GpuTempMaxThreshold))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"max_power_limit\":")
	out.String(string(in.MaxPowerLimit))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"l_2_cache_double_bit_volatile_ecc_errors_gpu\":")
	out.String(string(in.L2CacheDoubleBitVolatileEccErrorsGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pci_domain\":")
	out.String(string(in.PciDomain))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mem_clock_default_applications_clocks_gpu\":")
	out.String(string(in.MemClockDefaultApplicationsClocksGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"vbios_version\":")
	out.String(string(in.VbiosVersion))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"retired_page_addresses\":")
	out.String(string(in.RetiredPageAddresses))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"gpu_temp\":")
	out.String(string(in.GpuTemp))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"accounting_mode\":")
	out.String(string(in.AccountingMode))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"l_1_cache_double_bit_volatile_ecc_errors_gpu\":")
	out.String(string(in.L1CacheDoubleBitVolatileEccErrorsGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"device_memory_single_bit_aggregate_ecc_errors_gpu\":")
	out.String(string(in.DeviceMemorySingleBitAggregateEccErrorsGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"display_active\":")
	out.String(string(in.DisplayActive))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"default_power_limit\":")
	out.String(string(in.DefaultPowerLimit))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"encoder_util\":")
	out.String(string(in.EncoderUtil))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"serial\":")
	out.String(string(in.Serial))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"enforced_power_limit\":")
	out.String(string(in.EnforcedPowerLimit))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"retired_page_addresses_double_bit_retirement_retired_pages_gpu\":")
	out.String(string(in.RetiredPageAddressesDoubleBitRetirementRetiredPagesGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ecc_object\":")
	out.String(string(in.EccObject))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"value\":")
	if in.Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in.Value {
			if v8 > 0 {
				out.RawByte(',')
			}
			out.String(string(v9))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"display_mode\":")
	out.String(string(in.DisplayMode))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"device_memory\":")
	out.String(string(in.DeviceMemory))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pending_ecc\":")
	out.String(string(in.PendingEcc))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"clocks_throttle_reason_sw_power_cap\":")
	out.String(string(in.ClocksThrottleReasonSwPowerCap))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"total_single_bit_aggregate_ecc_errors_gpu\":")
	out.String(string(in.TotalSingleBitAggregateEccErrorsGpu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"current_gom\":")
	out.String(string(in.CurrentGom))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"memory_util\":")
	out.String(string(in.MemoryUtil))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GPU) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeGithubComRaiProjectNvidiaSmi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GPU) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeGithubComRaiProjectNvidiaSmi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GPU) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeGithubComRaiProjectNvidiaSmi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GPU) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeGithubComRaiProjectNvidiaSmi1(l, v)
}
